PROBLEM STATEMENT:
Let's play a game on an array! You're standing at index 0 of an n-element array named game. From some index i (where 0<=i<n), you can perform one of the following moves:
    Move Backward: If cell i-1 exists and contains a 0, you can walk back to cell i-1.
    Move Forward:
       If cell i+1 contains a zero, you can walk to cell i+1.
       If cell i+leap contains a zero, you can jump to cell i+leap.
       If you're standing in cell n-1 or the value of i+leap>=n, you can walk or jump off the end of the array and win the game.
In other words, you can move from index i to index i+1, i-1, or i+leap as long as the destination index is a cell containing a 0. If the destination index is greater than n-1, you win the game.
Given leap and game, complete the function in the editor below so that it returns true if you can win the game (or false if you cannot).

Input Format-
The first line contains an integer, , denoting the number of queries (i.e., function calls).
The 2.q subsequent lines describe each query over two lines:
   1.The first line contains two space-separated integers describing the respective values of n and leap.
   2.The second line contains n space-separated binary integers (i.e., zeroes and ones) describing the respective values of game1,game1,...,game n-1.

Constraints-
1<=q<=5000
2<=n<100
0<-leap<=100
It is guaranteed that the value of game[0] is always 0.

SOLUTION:

import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution 
{
    public static void main(String[] args) 
    {
        Scanner scanner = new Scanner(System.in);
        int t = Integer.parseInt(scanner.nextLine());
        for (int i = 0; i < t; i++) {
            int n = scanner.nextInt();
            int m = scanner.nextInt();
            int[] arr = new int[n];
            for (int j = 0; j < n; j++) 
            {
                arr[j] = scanner.nextInt();
            }
            solve(n,m,arr);
        }
    }
    public static void solve(int n, int m, int[] arr) 
    {
        if (solve(n,m,arr,new boolean[n],0)) 
        {
            System.out.println("YES");
        } 
        else 
        {
            System.out.println("NO");
        }
    }
    public static boolean solve(int n, int m, int[] arr, boolean[] visited, int curr) 
    {
        if (curr + m >= n || curr + 1 == n) 
        {
            return true;
        }        
        boolean[] newVisited = new boolean[n];
        for (int i = 0; i < n; i++) 
        {
            newVisited[i] = visited[i];
        }
        boolean s = false;
        if (!visited[curr+1] && arr[curr+1] == 0) 
        {
            newVisited[curr+1] = true;
            s = solve(n,m,arr,newVisited,curr+1);
        }
        if (s) 
        {
            return true;
        }
        if (m > 1 && arr[curr+m] == 0 && !visited[curr+m]) 
        {
            newVisited[curr+m] = true;
            s = solve(n,m,arr,newVisited,curr+m);
        }
        if (s) 
        {
            return true;
        }
        if (curr > 0 && arr[curr-1] == 0 && !visited[curr-1]) 
        {
            newVisited[curr-1] = true;
            s = solve(n,m,arr,newVisited,curr-1); 
        }
        return s;
    }
}
